playground
    http://play.golang.org

# go window 安装
# https://golang.org/dl/
# 安装msi文件后，会配置几个变量
# USER:GOPATH
# USER:PATH
# SYSTEM:PATH

# go linux 安装
# 下载 go 包 https://golang.org/dl/
# 解压到 /usr/local
# 添加环境变量 
sudo vi ~/.bash_profile
# export GOROOT=/usr/local/go
# export GOPATH=$HOME/gopath
# export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
# 刷新
source ~/.bash_profile
# 在 GOPATH 中建立3个文件夹 bin pkg src


# 在 vsc 中的配置
# 安装插件 go
# 配置代理
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.io,direct
# vsc 右下角 Analysis Tools Missing，安装


# 在 goland 中的配置
# GOPATH 为旧式项目管理，弃用，使用 go mod
# import 导入的内容有
# builtin 直接写包名，如 fmt
# 公有包，直接写路径，如 github.com/golang/protobuf/proto
# 私有包，路径可以随意，但需要与 go.mod 文件首行 module 名相同
#   若2个文件不在同目录下，import 的路径由 module 名开始写
#   若2个文件在不同项目，直接写 replace
# 公有包，私有包必须存在 go.mod
# 手动运行各 main 方法时，生成的 run configuration 可能 Run_kind = File，需要修改为 package 更符合逻辑

# 查看go环境
    go env
# 创建新module
    go mod init sodex
# 列出当前模块依赖
    go list -m all
# 列出当前模块依赖中可升级模块
    go list -u -m all
# 升级所有依赖至最新
    go get -u
# 升级所有依赖至最新的修订版本
    go get -u=patch
# 清理未使用/生效的依赖
    go mod tidy

# go get 的代理
    export GOPROXY=https://goproxy.io


# 在 visual studio code 中配置 go
# 安装go插件
# 配置代理
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.io,direct
# vsc 右下角 Analysis Tools Missing


# Standard Go Project Layout
    https://github.com/golang-standards/project-layout


go 语法
    # 给每个可用的核心分配一个逻辑处理器
    runtime.GOMAXPROCS(runtime.NumCPU())
    # 分配2个逻辑处理器给调度器使用
    runtime.GOMAXPROCS(2)
    # 让线程进入调度队列
    runtime.Gosched()
    # 原子函数
    atomic.AddInt64(&counter, 1)
    # 休眠
    time.Sleep(1 * time.Second)
    time.Sleep(250 * time.Millisecond)
    # 同步读写
    atomic.StoreInt64(&shutdown, 1)
    atomic.LoadInt64(&shutdown)
    # 无缓冲的整型通道
    unbuffered := make(chan int)
    # 有缓冲的字符串通道
    buffered := make(chan string, 10)
    # 日志配置
    func init() {
        log.SetPrefix("TRACE: ")
        log.SetFlags(log.Ldate | log.Lmicroseconds | log.Llongfile)
    }

go 命令行
    # 检测race代码
    go build -race



The Go Programming Language Specification



How to Write Go Code
Code organization
    A package is a collection of source files in the same directory that are compiled together.
    A module is a collection of related Go packages that are released together.
    A repository contains one or more modules. typically contains only one module
    A file named go.mod there declares the module path: the import path prefix for all packages within the module.
Your first program
    go mod init example.com/user/hello
    go install example.com/user/hello
    If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list. Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\go).
    go env -w GOBIN=/somewhere/else/bin
    go env -u GOBIN



Effective Go
Introduction
Example
    The Go package sources are intended to serve not only as the core library but also as examples of how to use the language.
Formatting
    Line length
Commentary





// fmt包中有个接口
// type Stringer interface {
//     String() string
// }
// 很多包打印时会调用它



map内置无需import

json
    json.Marshal()
        map[string]T这种key为string，T为json支持类型的map能使用json.Marshal()
        通道，复数，函数不能
        Cyclic结构不支持，Marshal会进入死循环
        指针会编码成它指向的值
        只编码大写字母开头的项
    json.Unmarshal()
        如何决定值的目的地
            大写项的标签
            大写项名
            大写项名忽略大小写
    使用map[string]interface{}和[]interface{}储存arbitrary JSON与arrays

printf
    https://blog.csdn.net/qq_34777600/article/details/81266453
    ％ｖ来说默认的格式
        bool:                    %t
        int, int8 etc.:          %d
        uint, uint8 etc.:        %d, %x if printed with %#v
        float32, complex64, etc: %g
        string:                  %s
        chan:                    %p
        pointer:                 %p
    通用
        v     值的默认格式。
        %+v   添加字段名(如结构体)
        %#v　 相应值的Go语法表示
        %T    相应值的类型的Go语法表示
        %%    字面上的百分号，并非值的占位符
    整数
        %b     二进制表示
        %c     相应Unicode码点所表示的字符
        %d     十进制表示
        %o     八进制表示
        %q     单引号围绕的字符字面值，由Go语法安全地转义
        %x     十六进制表示，字母形式为小写 a-f
        %X     十六进制表示，字母形式为大写 A-F
        %U     Unicode格式：U+1234，等同于 "U+%04X"
    浮点数及复数
        %b     无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat中的 'b' 转换格式一致。例如 -123456p-78
        %e     科学计数法，例如 -1234.456e+78
        %E     科学计数法，例如 -1234.456E+78
        %f     有小数点而无指数，例如 123.456
        %g     根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出
        %G     根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出
    字符串和bytes的slice
        %s     字符串或切片的无解译字节
        %q     双引号围绕的字符串，由Go语法安全地转义
        %x     十六进制，小写字母，每字节两个字符
        %X     十六进制，大写字母，每字节两个字符
    指针
        %p     十六进制表示，前缀 0x


log
    日志记录器是多 goroutine 安全的，多个routine同时调用一个日志记录器不会冲突



邮件列表
    http://groups.google.com/group/golang-nuts
    http://groups.google.com/group/golang-china

其他资源
    learn-go-with-tests
        https://quii.gitbook.io/learn-go-with-tests/
    go by example
        https://github.com/mmcgrana/gobyexample
    官网
        http://golang.org
    package列表
        https://golang.org/pkg/
    代码库
        https://github.com/golang/go
    go语言标准库
        https://books.studygolang.com/The-Golang-Standard-Library-by-Example/
    build-web-application-with-golang
        https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md
    regex tutorial
        https://github.com/StefanSchroeder/Golang-Regex-Tutorial
    https://blog.golang.org/
    https://www.gopl.io/
    https://learn.go.dev/
    https://github.com/KeKe-Li
    https://gobyexample.com/
    https://tour.golang.org/welcome/1

func
// 类型为指针时
type P *int
// 不允许定义方法
func (P) f1() { /* ... */ }
func (*P) f2() { /* ... */ }

interface
// 开发新包时，不要设计很多接口，之后才实现，这样最后每个接口只有一个实现，显得接口很多余且消耗运行时资源
// 接口只在多个 struct 需要统一行为时定义
// 例外情况，struct 因为依赖无法与 interface 在同一个包内时

// 接口值可以使用 == 和 != 来进行比较。两个接口值相等仅当它们都是 nil 值或者它们的动态类型相同并且动态值也根据这个动态类型的 == 操作相等
// 因为接口值是可比较的，所以它们可以用在 map 的键或者作为 switch 语句的操作数
// 然而，如果两个接口值的动态类型相同，但是这个动态类型是不可比较的（比如切片），将它们进行比较就会失败并且 panic

chan
// channel 用作函数参数时，通常要么只接收，要么只发送
// 有 goroutine 在等待 channel，且 channel 没有其他 goroutine 接收，这种情况称为 goroutine leak，是 bug
// 此时 GC 无法回收 goroutine

通道并不提供跨 goroutine 的数据访问保护机制。如果通过通道传输数据的一份副本，那么每个 goroutine 都持有一份副本，各自对自己的副本做修改是安全的。当传输的是指向数据的指针时，如果读和写是由不同的 goroutine 完成的，每个 goroutine 依旧需要额外的同步动作。

// 导入包方法通常希望是线程安全的

// 对于中文汉字，Unicode 标志都作为小写字母处理，因此中文的命名默认不能导出
// 不过国内的用户针对该问题提出了不同的看法，根据 RobPike 的回复，在 Go2 中有可能会将中日韩等字符当作大写字母处理
